def MainProgram():
  # Global parameters:
  global speed_ms    = 0.250
  global speed_rads  = 0.750
  global accel_mss   = 1.200
  global accel_radss = 1.200
  global blend_radius_m = 0.001
  global ref_frame = p[0,0,0,0,0,0]
  
  #
  # TO REMOVE HEADER:
  # Go to "Program" -> "Post-Processor Editor"
  # Select "Universal Robots" 
  # Set "INCLUDE_HEADER" to "False"
  #
  #--------------------------
  # Add any default subprograms here
  # For example, to drive a gripper as a program call:
  # def Gripper_Open():
  #   ...
  # end
  #
  # Example to drive a spray gun:
  def SprayOn(value):
    # use the value as an output:
    DO_SPRAY = 5
    if value == 0:
      set_standard_digital_out(DO_SPRAY, False)
    else:
      set_standard_digital_out(DO_SPRAY, True)
    end
  end

  # Example to drive an extruder:
  def Extruder(value):
    # use the value as an output:
    if value < 0:
      # stop extruder
    else:
      # start extruder
    end
  end
  
  # Example to move an external axis
  def MoveAxis(value):
    # use the value as an output:
    DO_AXIS_1 = 1
    DI_AXIS_1 = 1
    if value <= 0:
      set_standard_digital_out(DO_AXIS_1, False)
      
      # Wait for digital input to change state
      #while (get_standard_digital_in(DI_AXIS_1) != False):
      #  sync()
      #end
    else:
      set_standard_digital_out(DO_AXIS_1, True)
      
      # Wait for digital input to change state
      #while (get_standard_digital_in(DI_AXIS_1) != True):
      #  sync()
      #end
    end
  end
  #--------------------------
  
  # Subprogram ApproachMove
  def ApproachMove():
    ref_frame = p[0.600000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000]
    set_tcp(p[0.050000, 0.000000, 0.450000, 0.000000, 0.523599, 0.000000])
    movel(pose_trans(ref_frame,p[0.532054, -0.007539, 0.703896, 0.000000, 2.597539, -0.000000]),accel_mss,speed_ms,0,0.001)
    movel(pose_trans(ref_frame,p[0.007389, -0.007539, 0.431891, 0.000000, 3.141593, 0.000000]),accel_mss,speed_ms,0,0.001)
  end
  
  # Subprogram PaintTop
  def PaintTop():
    movel(pose_trans(ref_frame,p[0.035000, 0.072723, 0.044782, -0.000001, 3.111431, -0.305966]),accel_mss,speed_ms,0,0.001)
    movel(pose_trans(ref_frame,p[0.350000, 0.072538, 0.044948, -0.000001, 3.111431, -0.305966]),accel_mss,speed_ms,0,0.001)
    movel(pose_trans(ref_frame,p[0.350000, 0.157151, 0.021869, 0.000010, -3.086686, 0.410759]),accel_mss,speed_ms,0,0.001)
    movel(pose_trans(ref_frame,p[0.035000, 0.161083, 0.021160, 0.000000, -3.125514, 0.224036]),accel_mss,speed_ms,0,0.001)
    movel(pose_trans(ref_frame,p[0.035000, 0.281130, 0.032663, -0.000010, -3.067748, -0.474528]),accel_mss,speed_ms,0,0.001)
    movel(pose_trans(ref_frame,p[0.350000, 0.263305, 0.027463, 0.000009, 3.088563, 0.403830]),accel_mss,speed_ms,0,0.001)
    movel(pose_trans(ref_frame,p[0.350000, 0.365325, 0.040441, -0.000009, -2.992965, 0.662808]),accel_mss,speed_ms,0,0.001)
    movel(pose_trans(ref_frame,p[0.035000, 0.377766, 0.033388, 0.000005, -2.838138, 0.915579]),accel_mss,speed_ms,0,0.001)
  end
  
  # Subprogram RetractMove
  def RetractMove():
    movel(pose_trans(ref_frame,p[0.007389, 0.400000, 0.431891, -0.000000, 3.141593, 0.000000]),accel_mss,speed_ms,0,0.001)
    movel(pose_trans(ref_frame,p[0.532054, -0.007539, 0.703896, 0.000000, 2.597539, -0.000000]),accel_mss,speed_ms,0,0.001)
  end
  
  
  # Main program:
  # Program generated by RoboDK v5.9.0 for UR10e on 24/03/2025 16:07:34
  # Using nominal kinematics.
  ApproachMove()
  SprayOn(1)
  PaintTop()
  SprayOn(1)
  PaintTop()
  SprayOn(1)
  PaintTop()
  SprayOn(1)
  PaintTop()
  SprayOn(0)
  RetractMove()
  # End of main program
end

MainProgram()
